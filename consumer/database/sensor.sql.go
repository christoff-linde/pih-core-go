// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sensor.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSensor = `-- name: CreateSensor :one
INSERT INTO sensors (sensor_name, created_at, updated_at)
VALUES ($1, $2, $3)
RETURNING id, sensor_name, created_at, updated_at
`

type CreateSensorParams struct {
	SensorName string             `json:"sensor_name"`
	CreatedAt  pgtype.Timestamptz `json:"created_at"`
	UpdatedAt  pgtype.Timestamptz `json:"updated_at"`
}

func (q *Queries) CreateSensor(ctx context.Context, arg CreateSensorParams) (Sensor, error) {
	row := q.db.QueryRow(ctx, createSensor, arg.SensorName, arg.CreatedAt, arg.UpdatedAt)
	var i Sensor
	err := row.Scan(
		&i.ID,
		&i.SensorName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getSensorById = `-- name: GetSensorById :one
SELECT id, sensor_name, created_at, updated_at FROM sensors WHERE id=$1
`

// -- name: GetSensors :many
// SELECT * FROM sensors LIMIT $1 OFFSET $2;
func (q *Queries) GetSensorById(ctx context.Context, id int32) (Sensor, error) {
	row := q.db.QueryRow(ctx, getSensorById, id)
	var i Sensor
	err := row.Scan(
		&i.ID,
		&i.SensorName,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
