// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sensor_metadata.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSensorMetadata = `-- name: CreateSensorMetadata :one
INSERT INTO sensor_metadata ( id, sensor_id, manufacturer, model_number,  additional_data )
VALUES ($1, $2, $3, $4, $5)
RETURNING id, sensor_id, manufacturer, model_number, installation_time, updated_at, additional_data
`

type CreateSensorMetadataParams struct {
	ID             int32       `json:"id"`
	SensorID       int32       `json:"sensor_id"`
	Manufacturer   pgtype.Text `json:"manufacturer"`
	ModelNumber    pgtype.Text `json:"model_number"`
	AdditionalData []byte      `json:"additional_data"`
}

func (q *Queries) CreateSensorMetadata(ctx context.Context, arg CreateSensorMetadataParams) (SensorMetadatum, error) {
	row := q.db.QueryRow(ctx, createSensorMetadata,
		arg.ID,
		arg.SensorID,
		arg.Manufacturer,
		arg.ModelNumber,
		arg.AdditionalData,
	)
	var i SensorMetadatum
	err := row.Scan(
		&i.ID,
		&i.SensorID,
		&i.Manufacturer,
		&i.ModelNumber,
		&i.InstallationTime,
		&i.UpdatedAt,
		&i.AdditionalData,
	)
	return i, err
}

const getSensorMetadataForSensorId = `-- name: GetSensorMetadataForSensorId :one
SELECT sensors.id, sensors.sensor_name, sensors.sensor_unique_id, sensors.sensor_location, sensors.sensor_type, sensors.created_at, sensors.updated_at
FROM sensors
         JOIN sensor_metadata ON sensors.id = sensor_metadata.sensor_id
WHERE sensor_metadata.sensor_id = $1
LIMIT $2
`

type GetSensorMetadataForSensorIdParams struct {
	SensorID int32 `json:"sensor_id"`
	Limit    int32 `json:"limit"`
}

func (q *Queries) GetSensorMetadataForSensorId(ctx context.Context, arg GetSensorMetadataForSensorIdParams) (Sensor, error) {
	row := q.db.QueryRow(ctx, getSensorMetadataForSensorId, arg.SensorID, arg.Limit)
	var i Sensor
	err := row.Scan(
		&i.ID,
		&i.SensorName,
		&i.SensorUniqueID,
		&i.SensorLocation,
		&i.SensorType,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
