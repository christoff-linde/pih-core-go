// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: sensor_reading.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createSensorReading = `-- name: CreateSensorReading :one
INSERT INTO sensor_readings (sensor_id, temperature, humidity)
VALUES ($1, $2, $3)
RETURNING reading_timestamp, sensor_id, temperature, humidity, pressure
`

type CreateSensorReadingParams struct {
	SensorID    pgtype.Int4   `db:"sensor_id" json:"sensor_id"`
	Temperature pgtype.Float8 `db:"temperature" json:"temperature"`
	Humidity    pgtype.Float8 `db:"humidity" json:"humidity"`
}

// CreateSensorReading
//
//	INSERT INTO sensor_readings (sensor_id, temperature, humidity)
//	VALUES ($1, $2, $3)
//	RETURNING reading_timestamp, sensor_id, temperature, humidity, pressure
func (q *Queries) CreateSensorReading(ctx context.Context, arg CreateSensorReadingParams) (SensorReading, error) {
	row := q.db.QueryRow(ctx, createSensorReading, arg.SensorID, arg.Temperature, arg.Humidity)
	var i SensorReading
	err := row.Scan(
		&i.ReadingTimestamp,
		&i.SensorID,
		&i.Temperature,
		&i.Humidity,
		&i.Pressure,
	)
	return i, err
}

const getSensorReading = `-- name: GetSensorReading :many
SELECT reading_timestamp, sensor_id, temperature, humidity, pressure
FROM sensor_readings
WHERE sensor_id = $1
LIMIT $2 OFFSET $3
`

type GetSensorReadingParams struct {
	SensorID pgtype.Int4 `db:"sensor_id" json:"sensor_id"`
	Limit    int32       `db:"limit" json:"limit"`
	Offset   int32       `db:"offset" json:"offset"`
}

// GetSensorReading
//
//	SELECT reading_timestamp, sensor_id, temperature, humidity, pressure
//	FROM sensor_readings
//	WHERE sensor_id = $1
//	LIMIT $2 OFFSET $3
func (q *Queries) GetSensorReading(ctx context.Context, arg GetSensorReadingParams) ([]SensorReading, error) {
	rows, err := q.db.Query(ctx, getSensorReading, arg.SensorID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReading
	for rows.Next() {
		var i SensorReading
		if err := rows.Scan(
			&i.ReadingTimestamp,
			&i.SensorID,
			&i.Temperature,
			&i.Humidity,
			&i.Pressure,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorReadingDaily = `-- name: GetSensorReadingDaily :many
SELECT day, sensor_id, min_temperature, avg_temperature, max_temperature, min_humidity, avg_humidity, max_humidity
FROM sensor_readings_daily
LIMIT $1 OFFSET $2
`

type GetSensorReadingDailyParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

// GetSensorReadingDaily
//
//	SELECT day, sensor_id, min_temperature, avg_temperature, max_temperature, min_humidity, avg_humidity, max_humidity
//	FROM sensor_readings_daily
//	LIMIT $1 OFFSET $2
func (q *Queries) GetSensorReadingDaily(ctx context.Context, arg GetSensorReadingDailyParams) ([]SensorReadingsDaily, error) {
	rows, err := q.db.Query(ctx, getSensorReadingDaily, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReadingsDaily
	for rows.Next() {
		var i SensorReadingsDaily
		if err := rows.Scan(
			&i.Day,
			&i.SensorID,
			&i.MinTemperature,
			&i.AvgTemperature,
			&i.MaxTemperature,
			&i.MinHumidity,
			&i.AvgHumidity,
			&i.MaxHumidity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorReadingHourly = `-- name: GetSensorReadingHourly :many
SELECT hour, sensor_id, min_temperature, avg_temperature, max_temperature, min_humidity, avg_humidity, max_humidity
FROM sensor_readings_hourly
LIMIT $1 OFFSET $2
`

type GetSensorReadingHourlyParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

// GetSensorReadingHourly
//
//	SELECT hour, sensor_id, min_temperature, avg_temperature, max_temperature, min_humidity, avg_humidity, max_humidity
//	FROM sensor_readings_hourly
//	LIMIT $1 OFFSET $2
func (q *Queries) GetSensorReadingHourly(ctx context.Context, arg GetSensorReadingHourlyParams) ([]SensorReadingsHourly, error) {
	rows, err := q.db.Query(ctx, getSensorReadingHourly, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReadingsHourly
	for rows.Next() {
		var i SensorReadingsHourly
		if err := rows.Scan(
			&i.Hour,
			&i.SensorID,
			&i.MinTemperature,
			&i.AvgTemperature,
			&i.MaxTemperature,
			&i.MinHumidity,
			&i.AvgHumidity,
			&i.MaxHumidity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getSensorReadingMinutes = `-- name: GetSensorReadingMinutes :many
SELECT minute, sensor_id, min_temperature, avg_temperature, max_temperature, min_humidity, avg_humidity, max_humidity
FROM sensor_readings_minutes
LIMIT $1 OFFSET $2
`

type GetSensorReadingMinutesParams struct {
	Limit  int32 `db:"limit" json:"limit"`
	Offset int32 `db:"offset" json:"offset"`
}

// GetSensorReadingMinutes
//
//	SELECT minute, sensor_id, min_temperature, avg_temperature, max_temperature, min_humidity, avg_humidity, max_humidity
//	FROM sensor_readings_minutes
//	LIMIT $1 OFFSET $2
func (q *Queries) GetSensorReadingMinutes(ctx context.Context, arg GetSensorReadingMinutesParams) ([]SensorReadingsMinute, error) {
	rows, err := q.db.Query(ctx, getSensorReadingMinutes, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []SensorReadingsMinute
	for rows.Next() {
		var i SensorReadingsMinute
		if err := rows.Scan(
			&i.Minute,
			&i.SensorID,
			&i.MinTemperature,
			&i.AvgTemperature,
			&i.MaxTemperature,
			&i.MinHumidity,
			&i.AvgHumidity,
			&i.MaxHumidity,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
